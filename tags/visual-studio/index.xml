<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Studio on 清松小站</title><link>https://coderqs.github.io/tags/visual-studio/</link><description>Recent content in Visual Studio on 清松小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 11 Mar 2019 00:00:00 +0800</lastBuildDate><atom:link href="https://coderqs.github.io/tags/visual-studio/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio 的 C++ 项目中的一些配置的介绍</title><link>https://coderqs.github.io/2019/03/visual-studio-%E7%9A%84-c-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0800</pubDate><guid>https://coderqs.github.io/2019/03/visual-studio-%E7%9A%84-c-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid><description>&lt;h1 id="visual-studio-的-c-项目中的一些配置的介绍">Visual Studio 的 C++ 项目中的一些配置的介绍&lt;/h1>
&lt;h2 id="vc包含目录和-c-附加包含目录的区别">VC++包含目录和 C++ 附加包含目录的区别&lt;/h2>
&lt;p>c/c++ 附加包含目录，代表的是c/c++文件编译时所需要的头文件，而资源编译时也是需要附加包含库目录的，而
vc++ 的包含目录，代表的是全局项目的包含目录。配置过VC++里面的库，C/C++里面的就可以不用配置。&lt;/p>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_35608277/article/details/80768660" target="_blank" rel="noopener"
>VC包含目录和c/c++附加包含目录的区别&lt;/a>&lt;/p>
&lt;h2 id="默认的属性文件">默认的属性文件&lt;/h2>
&lt;h3 id="vs2017">vs2017&lt;/h3>
&lt;ol>
&lt;li>Microsoft.Cpp.x64.user 系统默认的属性表，全路径为 &lt;code>C:\Users\horswing\AppData\Local\Microsoft\MSBuild\v4.0\Microsoft.Cpp.x64.user.props&lt;/code> 项目创建后，默认有这个属性表。双击可以修改（效果与 &lt;code>solution explorer 项目名上右键 -&amp;gt; property&lt;/code> 一致），右键选则 remove 和移除。&lt;/li>
&lt;li>Application 表示这个项目生成的是一个“应用程序”（不是DLL或LIB）。在 Property Manger 里，这项是不能改的，所以你发现双击后，出现的页面是灰色的，右键也只有 property 选项。在哪里改呢？在 solution explorer 里的 &lt;code>项目属性 -&amp;gt; gerneral -&amp;gt; Project Defaults -&amp;gt; Configuration Type&lt;/code>.&lt;/li>
&lt;li>Unicode Support 和 Core Windows Libraries 和 Application 项一样，这两项也是“只能看不能改的”，要改分别在 &lt;code>项目属性 -&amp;gt; gerneral -&amp;gt; Project Defaults&lt;/code> 里的 &lt;code>Character Set&lt;/code> 和 &lt;code>Use of MFC&lt;/code> 修改。&lt;/li>
&lt;/ol>
&lt;h3 id="vs2019">vs2019&lt;/h3>
&lt;ol>
&lt;li>vs2019 相较于 vs2017 少了 Microsoft.Cpp.x64.user 多了 whole program optimization&lt;/li>
&lt;/ol>
&lt;h3 id="参考资料-1">参考资料&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/wu_nan_nan/article/details/70054845" target="_blank" rel="noopener"
>visual studio属性管理器（property manager）上各项的含义&lt;/a>&lt;/p>
&lt;h2 id="多张属性表叠加">多张属性表叠加&lt;/h2>
&lt;p>多张属性表一起使用时，两张表定义了相同的属性，后面的表的配置优先。&lt;br>
例如，当两张表同时定义了 &lt;strong>&amp;ldquo;附加包含目录&amp;rdquo;&lt;/strong>，在没有选择继承的情况下，则只有后面导入的属性表的该项配置生效，如果选择了继承则同时生效（因为后一张属性表将前一张属性表的该项配置继承了，本质上还是后一张属性表的配置生效）&lt;/p>
&lt;blockquote>
&lt;p>Property sheets are a nice way to set up properties to projects. Each
property sheet is a collection of properties for a project. One can
attach arbitrarily many property sheets to each project, and the
property sheets can be shared between projects. The latter feature is
the essential one.&lt;/p>
&lt;p>In my solutions at least, the projects share very similar properties.
Now I can create just one property sheet for the whole solution and
apply that to each project. If I want to change the properties, I will
do so in the property sheet.&lt;/p>
&lt;p>What’s more, multiple property sheets can be layered so that the union
of their properties applies. The sheets are given an order. If two
sheets define the same property, then the later one takes priority.&lt;/p>
&lt;p>The strategy is to give each solution a property sheet in which to
configure output directories, disable warnings, and disable secure-stl
etc. You will then make this property sheet part of your solution, in
the sense of carrying it around in the version control.&lt;/p>
&lt;p>There are also special global property sheets called
Microsoft.Cpp.Win32.user and Microsoft.Cpp.Win64.user which are
automatically added to each configuration of each project. These will
apply properties globally on your computer. If you change to another
computer, these settings are lost. These property sheets are ideal for
specifying include and library directories for external libraries
(which are of course computer-specific). While the former works on
32-bit builds, the latter works on 64-bit builds. Of course, you will
want to choose different directories for them.&lt;/p>
&lt;p>A bit odd feature of the property sheets is that they won’t get save
automatically when you change a property. You must either Save All, or
right click on the property sheet and save it. This is unintuitive and
causes unnecessary confusion from time to time.&lt;/p>
&lt;p>It is useful to notice that a property sheet can be added to all
projects and configuration at the same time. Simply select the desired
projects or configurations and right click to add an existing property
sheet. Unfortunately, it seems a given property sheet can not be
removed from all projects at once.&lt;/p>
&lt;p>If you need to set project-specific properties, do note that you must
explicitly bring in the inherited properties. For example, in the
Preprocessor definitions property, this is done by
%(PreprocessorDefinitions).&lt;/p>
&lt;p>There is a trap in the command-line settings. If you specify
Additional Options in a project, then those will not be unioned with
the additional options in the property sheets. Unless I am mistaken,
it is missing a way to bring in the inherited options. Therefore, you
should use the other options explicitly instead. For example, if you
need a preprocessor definition, do it in the Preprocessor definitions
property instead of as a /D switch in Additional Options.&lt;/p>
&lt;/blockquote>
&lt;h3 id="参考资料-2">参考资料&lt;/h3>
&lt;p>&lt;a class="link" href="https://kaba.hilvi.org/homepage/blog/shorties-2012.htm" target="_blank" rel="noopener"
>Property sheets in Visual Studio 2010&lt;/a>&lt;/p></description></item><item><title>Visual Studio 的一些实用功能</title><link>https://coderqs.github.io/2019/03/visual-studio-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0800</pubDate><guid>https://coderqs.github.io/2019/03/visual-studio-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD/</guid><description>&lt;h1 id="visual-studio-的一些实用功能">Visual Studio 的一些实用功能&lt;/h1>
&lt;h2 id="代码编辑">代码编辑&lt;/h2>
&lt;h3 id="代码格式化">代码格式化&lt;/h3>
&lt;p>Visual Studio 2017 15.7 Preview 1 为 C++ 开发人员提供了内置的 &lt;a class="link" href="https://clang.llvm.org/docs/ClangFormat.html" target="_blank" rel="noopener"
>ClangFormat&lt;/a> 支持。内置 LLVM、Google、Chromium、Mozilla 或 WebKit 等格式约定。&lt;/p>
&lt;h3 id="使用方式">使用方式&lt;/h3>
&lt;p>快捷键：&lt;code>Ctrl+k Ctrl+d&lt;/code>&lt;br>
菜单选项：&lt;code>编辑&lt;/code> -&amp;gt; &lt;code>格式文档&lt;/code>&lt;/p>
&lt;h4 id="选择格式">选择格式&lt;/h4>
&lt;p>&lt;code>工具&lt;/code> -&amp;gt; &lt;code>选项&lt;/code> -&amp;gt; &lt;code>文本编辑器&lt;/code> -&amp;gt; &lt;code>C/C++&lt;/code> -&amp;gt; &lt;code>代码样式&lt;/code> -&amp;gt; &lt;code>格式设置&lt;/code> -&amp;gt; &lt;code>默认格式设置样式&lt;/code>&lt;br>
&lt;img src="https://coderqs.github.io/%e5%b7%a5%e5%85%b7/%e7%bc%96%e7%a8%8b%e5%b7%a5%e5%85%b7/IDE/visual_studio/ClangFormat-Options.png"
loading="lazy"
alt="ClangFormat-Options.png"
>&lt;/p>
&lt;h4 id="参考资料">参考资料&lt;/h4>
&lt;p>&lt;a class="link" href="https://devblogs.microsoft.com/cppblog/clangformat-support-in-visual-studio-2017-15-7-preview-1/" target="_blank" rel="noopener"
>Visual Studio 2017 中的 ClangFormat 支持&lt;/a>&lt;br>
&lt;a class="link" href="https://blog.csdn.net/xy1157/article/details/93224422" target="_blank" rel="noopener"
>Visual Studio和VS Code使用clang-format自定义C++代码默认格式化样式&lt;/a>&lt;/p></description></item></channel></rss>