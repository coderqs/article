<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on 清松小站</title><link>https://coderqs.github.io/tags/ci/cd/</link><description>Recent content in CI/CD on 清松小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://coderqs.github.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins 的安装与部署</title><link>https://coderqs.github.io/2019/03/jenkins-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0800</pubDate><guid>https://coderqs.github.io/2019/03/jenkins-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</guid><description>&lt;h1 id="jenkins-的安装与部署">Jenkins 的安装与部署&lt;/h1>
&lt;h2 id="准备">准备&lt;/h2>
&lt;h3 id="硬件要求">硬件要求&lt;/h3>
&lt;p>最低硬件要求&lt;/p>
&lt;ul>
&lt;li>256 MB 内存;&lt;/li>
&lt;li>1 GB 的驱动器空间（尽管如果将 Jenkins 作为 Docker 容器运行，建议至少使用 10 GB）;&lt;/li>
&lt;/ul>
&lt;p>小团队推荐的硬件配置：&lt;/p>
&lt;ul>
&lt;li>4 GB+ 的内存;&lt;/li>
&lt;li>50 GB+ 的驱动器空间;&lt;/li>
&lt;/ul>
&lt;p>更多要求请参考官方的&lt;a class="link" href="https://www.jenkins.io/doc/book/scaling/hardware-recommendations/" target="_blank" rel="noopener"
>硬件推荐&lt;/a>&lt;/p>
&lt;h3 id="软件要求">软件要求&lt;/h3>
&lt;h4 id="java">Java&lt;/h4>
&lt;ul>
&lt;li>32 位和 64 位版本均支持 Java 8 运行时环境&lt;/li>
&lt;li>支持 Java 11 运行时环境
&lt;ul>
&lt;li>Java 11 Docker 安装说明包含在“在 Docker 中下载和运行 Jenkins”中&lt;/li>
&lt;li>有关其他升级说明，请参阅Java 8 到 Java 11 升级指南&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不支持 Java 7 及之前版本&lt;/li>
&lt;li>不支持 Java 9 和 10&lt;/li>
&lt;li>不支持 Java 12、13、14、15 和 16&lt;/li>
&lt;/ul>
&lt;p>这些要求适用于 Jenkins 系统的所有组件，包括 Jenkins 控制器、所有类型的代理、CLI 客户端和其他组件。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h3 id="centos">Centos&lt;/h3>
&lt;p>安装命令:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo wget -O /etc/yum.repos.d/jenkins.repo &lt;span style="color:#ed9d13">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ed9d13">&lt;/span> https://pkg.jenkins.io/redhat-stable/jenkins.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo yum upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo yum install epel-release java-11-openjdk-devel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo yum install jenkins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl daemon-reload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start jenkins
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>在 &lt;a class="link" href="https://www.jenkins.io/download/#downloading-jenkins" target="_blank" rel="noopener"
>下载 Jenkins&lt;/a> 的页面下载对应的 msi 安装包，根据提示安装即可。&lt;/p>
&lt;h3 id="设置向导">设置向导&lt;/h3>
&lt;h4 id="解锁-jenkins">解锁 Jenkins&lt;/h4>
&lt;p>当第一次访问一个新的 Jenkins 实例时，需要使用系统自动生成的密码来解锁&lt;/p>
&lt;ul>
&lt;li>访问 &lt;code>http://localhost:8080&lt;/code> (端口默认是
`8080`，如果有修改则替换成修改的端口，&lt;strong>要记得在防火墙添加对应的端口&lt;/strong>);
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/f0e6f3affa6530fd03fb41508004601f16de6135/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/setup-jenkins-01-unlock-jenkins-page.jpg"
loading="lazy"
alt="jenkins/setup-jenkins-01-unlock-jenkins-page"
>&lt;/li>
&lt;li>自动生成的密码在 &lt;code>/var/lib/jenkins/secrets/&lt;/code> （Windows 在 &lt;code>C:\Program Files\Jenkins\secrets\&lt;/code>，如果自定义安装路径则在安装的路径中）路径下的 &lt;code>initialAdminPassword&lt;/code> 文件中;&lt;/li>
&lt;/ul>
&lt;h4 id="使用插件自定义-jenkins">使用插件自定义 Jenkins&lt;/h4>
&lt;p>建议选择 &lt;code>Install suggested plugins&lt;/code>(建议安装的插件)&lt;/p>
&lt;h2 id="配置主从节点">配置主从节点&lt;/h2>
&lt;p>Jenkins master 附带 Jenkins 的基本安装，在此配置中，master
处理构建系统的所有任务并分配从节点并将构建发送给从节点以执行作业。&lt;/p>
&lt;h3 id="设置-centos-从节点">设置 Centos 从节点&lt;/h3>
&lt;ol>
&lt;li>添加新节点(&lt;code>Manage Jenkins&lt;/code> -&amp;gt; &lt;code>Manage Nodes and Clouds&lt;/code> -&amp;gt;&lt;code>新建节点&lt;/code>);&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>输入节点名称，勾选 &lt;code>Permanent Agent&lt;/code>;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E6%96%B0%E5%BB%BA%E8%8A%82%E7%82%B9.PNG"
loading="lazy"
alt="新建节点"
>&lt;/li>
&lt;li>建议设置 &lt;code>描述&lt;/code> 和 &lt;code>标签&lt;/code> 方便管理;&lt;/li>
&lt;li>在 &lt;code>远程工作目录&lt;/code> 设置&lt;strong>从节点机器上 Jenkins 的专用目录&lt;/strong>;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E6%96%B0%E5%BB%BA%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE_01.PNG"
loading="lazy"
alt="设置远程工作目录"
>&lt;/li>
&lt;li>启动方式选择 &lt;code>Launch agents via SSH&lt;/code>，&lt;code>主机&lt;/code> 中输入从节点的
ip，&lt;code>Credentials&lt;/code> 选择对应的凭证(如果没有可以点击旁边的 &lt;code>添加&lt;/code> 选择 &lt;code>Jenkins&lt;/code>);&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E6%96%B0%E5%BB%BA%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE_02.PNG"
loading="lazy"
alt="设置从节点连接信息"
>&lt;/li>
&lt;li>添加凭证;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E6%B7%BB%E5%8A%A0%E5%87%AD%E8%AF%81.PNG"
loading="lazy"
alt="添加凭证"
>&lt;/li>
&lt;li>保存&lt;/li>
&lt;/ul>
&lt;h3 id="设置-windows-从节点">设置 Windows 从节点&lt;/h3>
&lt;p>&lt;strong>前半部分与 [设置 Centos 从节点](##设置 Centos 从节点) 一致，从第 5 步开始不同&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>启动方式选择
&lt;code>Launch agent by connecting it the master&lt;/code>(如果没有这项则需要修改 &lt;code>Configure Global Security&lt;/code>)，勾选 &lt;code>Use WebSocket&lt;/code>;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E6%96%B0%E5%BB%BAwindows%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE_01.PNG"
loading="lazy"
alt="选择启动方式"
>&lt;/li>
&lt;li>修改 &lt;code>Manage Jenkins -&amp;gt; Configure Global Security -&amp;gt; 代理&lt;/code>;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E6%96%B0%E5%BB%BAwindows%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE_02.PNG"
loading="lazy"
alt="修改 Configure Global Security"
>&lt;/li>
&lt;li>保存，返回节点列表;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8.PNG"
loading="lazy"
alt="节点列表"
>&lt;/li>
&lt;li>点击刚刚添加的节点会弹出下面的页面，点击其中的 &lt;code>agent&lt;/code> 下载文件 &lt;code>agent.jar&lt;/code>;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2_windows%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2.PNG"
loading="lazy"
alt="节点信息页面"
>&lt;/li>
&lt;li>把刚下载的文件放到从节点机器上，并执行页面中的命令(&lt;strong>注：需要 java 环境，要提前装好，版本最好与主节点上的一致&lt;/strong>+);&lt;/li>
&lt;/ul>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.jenkins.io/doc/book/installing/" target="_blank" rel="noopener"
>官网 - 安装 Jenkins&lt;/a>&lt;br>
&lt;a class="link" href="https://dzone.com/articles/jenkins-03-configure-master-and-slave" target="_blank" rel="noopener"
>Jenkins 配置主从节点&lt;/a>&lt;br>
&lt;a class="link" href="https://www.cnblogs.com/xiaomifeng0510/p/11848834.html" target="_blank" rel="noopener"
>jenkins 配置windows节点实现自动化部署&lt;/a>&lt;/p></description></item><item><title>Jenkins 配置 SVN 持续集成环境</title><link>https://coderqs.github.io/2019/03/jenkins-%E9%85%8D%E7%BD%AE-svn-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0800</pubDate><guid>https://coderqs.github.io/2019/03/jenkins-%E9%85%8D%E7%BD%AE-svn-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</guid><description>&lt;h1 id="jenkins-配置-svn-持续集成环境">Jenkins 配置 SVN 持续集成环境&lt;/h1>
&lt;h2 id="准备">准备&lt;/h2>
&lt;p>安装 Jenkins 插件 Subversion&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ol>
&lt;li>将 SVN 的用户名和密码添加到&lt;a class="link" href="https://coderqs.github.io/%e5%b7%a5%e5%85%b7/%e7%bc%96%e7%a8%8b%e5%b7%a5%e5%85%b7/ci_cd/jenkins/" >凭证&lt;/a>中;&lt;/li>
&lt;li>创建一个新的任务;
&lt;ol>
&lt;li>勾选 &lt;code>General&lt;/code> 中的 &lt;code>限制项目的运行节点&lt;/code> 并指定节点(无需要可以跳过这步);&lt;/li>
&lt;li>&lt;code>源码管理&lt;/code> 中勾选 &lt;code>Subversion&lt;/code>，在 &lt;code>Repository URL&lt;/code> 中添加仓库的地址，&lt;code>Credentials&lt;/code> 选择第 1 步中配置的凭证;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/jenkins%E9%85%8D%E7%BD%AEsvn%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E4%BB%BB%E5%8A%A1_%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86.PNG"
loading="lazy"
alt="jenkins配置svn持续发布任务_源码管理"
>&lt;/li>
&lt;li>勾选 &lt;code>构建触发器&lt;/code> 中的 &lt;code>Build periodically&lt;/code>(控制任务的构建周期) 和 &lt;code>Poll SCM&lt;/code>(检查 SVN 是否有新的提交的周期)，下图示例是每 30 分钟构建一次任务，5 分钟检查一次 SVN 是否更新;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/jenkins%E9%85%8D%E7%BD%AEsvn%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E4%BB%BB%E5%8A%A1_%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.PNG"
loading="lazy"
alt="jenkins配置svn持续发布任务_构建触发器"
>&lt;/li>
&lt;li>勾选 &lt;code>构建环境&lt;/code> 中的 &lt;code>Delete workspace before build starts&lt;/code>(无需要可以跳过这步);&lt;/li>
&lt;li>&lt;code>构建 -&amp;gt; 增加构建步骤&lt;/code> 中选择准备使用的方式(一般 Linux 环境使用 &lt;code>Execute shell&lt;/code>，Windows 使用 &lt;code>Execute Windows batch command&lt;/code>);&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="扩展">扩展&lt;/h2>
&lt;h3 id="windows-构建方法">windows 构建方法&lt;/h3>
&lt;p>在 Windows 下 Jenkins 自带的构建步骤是使用 Windows 批处理脚本，想要编译 VS 的工程会比较麻烦，在这里推荐使用插件 &lt;code>MSBuild&lt;/code>。&lt;/p>
&lt;h4 id="配置-msbuild">配置 MSBuild&lt;/h4>
&lt;ol>
&lt;li>安装插件 MSBuild;&lt;/li>
&lt;li>安装完成后在 `Global Tool Configuration -&amp;gt; MSBuild -&amp;gt; 新增 MSBuild` 中添加 MSBuild.exe 的路径(默认在&lt;code>C:\\WINDOWS\\Microsoft.NET\\Framework\\\[version\].&lt;/code> 下，如果不是默认目录自行搜索)并保存;&lt;br>
&lt;img src="https://raw.githubusercontent.com/coderqs/wiki_img/master/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/ci_cd/jenkins/jenkins%E9%85%8D%E7%BD%AEsvn%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E4%BB%BB%E5%8A%A1_%E8%AE%BE%E7%BD%AEMSBuild.PNG"
loading="lazy"
alt="设置 MSBuild"
>&lt;/li>
&lt;li>创建任务，任务的配置与&lt;a class="link" href="#%e9%85%8d%e7%bd%ae" >#配置&lt;/a>中创建的步骤基本一致，不同的地方在于最后一步 &lt;code>构建&lt;/code> 选择的是 &lt;code>Build a Visiual Studio project or solution using MSBuild&lt;/code>;&lt;/li>
&lt;li>&lt;code>MSBuild Version&lt;/code>&lt;/li>
&lt;li>&lt;code>MSBuild Build File&lt;/code>: &lt;code>.sln&lt;/code> 或 &lt;code>.proj&lt;/code> 的路径(不知道他的起始路径是哪里，这里就直接填的绝对路径);
&lt;ol>
&lt;li>&lt;code>Command Line Arguments&lt;/code>: MSBuild 的命令行参数，这里提供两个实用的参数，详细的请参考参考资料;&lt;/li>
&lt;li>&lt;code>-t:project_name&lt;/code>: 生成 &lt;code>project_name&lt;/code> 项目;&lt;/li>
&lt;li>&lt;code>-p:Platform=x64&lt;/code>: 生成 x64 版本;&lt;/li>
&lt;li>&lt;code>-p:Configuration=Release&lt;/code>: 生成 Release 版本;&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/145361830" target="_blank" rel="noopener"
>【手把手】10分钟搭建Jenkins+SVN持续集成环境&lt;/a>&lt;br>
&lt;a class="link" href="https://blog.csdn.net/kongsuhongbaby/article/details/100170537" target="_blank" rel="noopener"
>jenkins_windows(七)：SVN自动触发项目构建的配置&lt;/a>&lt;br>
&lt;a class="link" href="https://blog.csdn.net/Jasonliujintao/article/details/70812639" target="_blank" rel="noopener"
>Jenkins 配置svn自动部署&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.microsoft.com/en-us/cpp/build/msbuild-visual-cpp?view=msvc-160" target="_blank" rel="noopener"
>命令行上的 MSBuild - C++&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2019#arguments" target="_blank" rel="noopener"
>MSBuild 命令行参考&lt;/a>&lt;br>
&lt;a class="link" href="https://www.it-swarm.cn/zh/build/%E4%BD%BF%E7%94%A8msbuild%E6%8C%87%E5%AE%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/1070142712/" target="_blank" rel="noopener"
>使用msbuild指定解决方案的项目文件&lt;/a>&lt;/p></description></item></channel></rss>